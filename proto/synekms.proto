syntax = "proto3";

package synekms;

service KMSService {
  rpc CreateKey(CreateKeyRequest) returns (CreateKeyResponse);
  rpc Encrypt(EncryptRequest) returns (EncryptResponse);
  rpc Decrypt(DecryptRequest) returns (DecryptResponse);
  rpc Sign(SignRequest) returns (SignResponse);
  rpc Verify(VerifyRequest) returns (VerifyResponse);
}

message CreateKeyRequest {
  string name = 1;
  string description = 2;
  // Machine-friendly name (e.g., "billing-api-key")
  string slug = 3;
  string encryption_algorithm = 4;
  // Defaults to "encrypt-decrypt"
  string key_usage = 5;
}

message CreateKeyResponse {
  string key_id = 1;
  string name = 2;
  string description = 3;
  string project_id = 4;
  string slug = 5;
}

message EncryptRequest {
  string key_id = 1;
  // Base64 encoded plaintext
  string plaintext_b64 = 2;
}

message EncryptResponse {
  // Base64 encoded ciphertext
  string ciphertext_b64 = 1;
}

message DecryptRequest {
  string key_id = 1;
  // Base64 encoded ciphertext
  string ciphertext_b64 = 2;
}

message DecryptResponse {
  // Base64 encoded plaintext
  string plaintext_b64 = 1;
}

message SignRequest {
  string key_id = 1;
  // Base64 encoded data to sign
  string data_b64 = 2;
  // If omitted, uses the key's default algorithm
  optional string algorithm = 3;
}

message SignResponse {
  // Base64 encoded signature
  string signature_b64 = 1;
}

message VerifyRequest {
  string key_id = 1;
  // Base64 encoded original data
  string data_b64 = 2;
  // Base64 encoded signature
  string signature_b64 = 3;
  // Must match the signing algorithm if specified
  optional string algorithm = 4;
}

message VerifyResponse {
  bool valid = 1;
}
